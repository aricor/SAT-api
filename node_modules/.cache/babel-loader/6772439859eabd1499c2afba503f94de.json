{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/test2/SAT-api/src/Components/timer.js\";\nimport React, { Component } from 'react';\nimport styles from './timer.css';\nexport default class Timer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      minutes: 65,\n      seconds: 0\n    };\n  }\n\n  componentDidMount() {\n    this.myInterval = setInterval(() => {\n      const _this$state = this.state,\n            seconds = _this$state.seconds,\n            minutes = _this$state.minutes;\n\n      if (seconds > 0) {\n        this.setState(({\n          seconds\n        }) => ({\n          seconds: seconds - 1\n        }));\n      }\n\n      if (seconds === 0) {\n        if (minutes === 0) {\n          clearInterval(this.myInterval);\n        } else {\n          this.setState(({\n            minutes\n          }) => ({\n            minutes: minutes - 1,\n            seconds: 59\n          }));\n        }\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.myInterval);\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          minutes = _this$state2.minutes,\n          seconds = _this$state2.seconds;\n    return React.createElement(\"div\", {\n      className: \"timerContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, minutes === 0 && seconds === 0 ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Busted!\") : React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Time Remaining: \", minutes, \":\", seconds < 10 ? \"0\".concat(seconds) : seconds));\n  }\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/test2/SAT-api/src/Components/timer.js"],"names":["React","Component","styles","Timer","state","minutes","seconds","componentDidMount","myInterval","setInterval","setState","clearInterval","componentWillUnmount","render"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAAA;AAAA;AAAA,SACzCG,KADyC,GACjC;AACJC,MAAAA,OAAO,EAAE,EADL;AAEJC,MAAAA,OAAO,EAAE;AAFL,KADiC;AAAA;;AAMzCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL,GAAkBC,WAAW,CAAC,MAAM;AAAA,0BACH,KAAKL,KADF;AAAA,YACxBE,OADwB,eACxBA,OADwB;AAAA,YACfD,OADe,eACfA,OADe;;AAGhC,UAAIC,OAAO,GAAG,CAAd,EAAiB;AACb,aAAKI,QAAL,CAAc,CAAC;AAAEJ,UAAAA;AAAF,SAAD,MAAkB;AAC5BA,UAAAA,OAAO,EAAEA,OAAO,GAAG;AADS,SAAlB,CAAd;AAGH;;AACD,UAAIA,OAAO,KAAK,CAAhB,EAAmB;AACf,YAAID,OAAO,KAAK,CAAhB,EAAmB;AACfM,UAAAA,aAAa,CAAC,KAAKH,UAAN,CAAb;AACH,SAFD,MAEO;AACH,eAAKE,QAAL,CAAc,CAAC;AAAEL,YAAAA;AAAF,WAAD,MAAkB;AAC5BA,YAAAA,OAAO,EAAEA,OAAO,GAAG,CADS;AAE5BC,YAAAA,OAAO,EAAE;AAFmB,WAAlB,CAAd;AAIH;AACJ;AACJ,KAlB4B,EAkB1B,IAlB0B,CAA7B;AAmBH;;AAEDM,EAAAA,oBAAoB,GAAG;AACnBD,IAAAA,aAAa,CAAC,KAAKH,UAAN,CAAb;AACH;;AAEDK,EAAAA,MAAM,GAAG;AAAA,yBACwB,KAAKT,KAD7B;AAAA,UACGC,OADH,gBACGA,OADH;AAAA,UACYC,OADZ,gBACYA,OADZ;AAEL,WACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMD,OAAO,KAAK,CAAZ,IAAiBC,OAAO,KAAK,CAA7B,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,GAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAqBD,OAArB,OAA+BC,OAAO,GAAG,EAAV,cAAmBA,OAAnB,IAA+BA,OAA9D,CAHV,CADJ;AAQH;;AA1CwC","sourcesContent":["\nimport React, { Component } from 'react'\nimport styles from './timer.css'\n\nexport default class Timer extends Component {\n    state = {\n        minutes: 65,\n        seconds: 0,\n    }\n\n    componentDidMount() {\n        this.myInterval = setInterval(() => {\n            const { seconds, minutes } = this.state\n\n            if (seconds > 0) {\n                this.setState(({ seconds }) => ({\n                    seconds: seconds - 1\n                }))\n            }\n            if (seconds === 0) {\n                if (minutes === 0) {\n                    clearInterval(this.myInterval)\n                } else {\n                    this.setState(({ minutes }) => ({\n                        minutes: minutes - 1,\n                        seconds: 59\n                    }))\n                }\n            } \n        }, 1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.myInterval)\n    }\n\n    render() {\n        const { minutes, seconds } = this.state\n        return (\n            <div className=\"timerContainer\">\n                { minutes === 0 && seconds === 0\n                    ? <h1>Busted!</h1>\n                    : <h1>Time Remaining: {minutes}:{seconds < 10 ? `0${seconds}` : seconds}</h1>\n                }\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}