{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nexports.default = function () {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$take = _ref.take,\n      take = _ref$take === undefined ? function () {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n  } : _ref$take,\n      _ref$debounce = _ref.debounce,\n      debounce = _ref$debounce === undefined ? function (fn) {\n    return fn;\n  } : _ref$debounce;\n\n  return function (Component) {\n    var _class, _temp2;\n\n    return _temp2 = _class = function (_React$Component) {\n      _inherits(WindowDimensions, _React$Component);\n\n      function WindowDimensions() {\n        var _ref2;\n\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, WindowDimensions);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = WindowDimensions.__proto__ || Object.getPrototypeOf(WindowDimensions)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {\n          width: 0,\n          height: 0\n        }, _this.onResize = debounce(function () {\n          // Note that while we're not actually using this state, it will be used to\n          // tell React that this component may need to render again.\n          _this.setState({\n            width: window.innerWidth,\n            height: window.innerHeight\n          });\n        }), _temp), _possibleConstructorReturn(_this, _ret);\n      }\n\n      _createClass(WindowDimensions, [{\n        key: 'componentWillMount',\n        value: function componentWillMount() {\n          window.addEventListener('resize', this.onResize, false);\n        }\n      }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n          window.removeEventListener('resize', this.onResize, false);\n        }\n      }, {\n        key: 'render',\n        value: function render() {\n          var props = this.props;\n          var windowProps = take(props);\n          return _react2.default.createElement(Component, _extends({}, props, windowProps));\n        }\n      }]);\n\n      return WindowDimensions;\n    }(_react2.default.Component), _class.displayName = 'WindowDimensions', _temp2;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}